security:
    encoders:
        App\Entity\User:
            algorithm: argon2i
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        #c'est le firewall qui permet d'identifier et d'authentifier un anonyme par la méthode json_login  le chemin de controle est dans check_path et doit être déclarée dans routes.yaml
        #le pattern du chemin de ce firewall doit être inclut dans le chemin check_path sinon il dit que la route ne match pas avec le pattern du firewall
        login:
            pattern:  ^/login
            lazy: true
            provider: app_user_provider
            json_login:
                check_path: /login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        # c'est un firewall pour la route des utilisateurs avec un guard pour gérer l'autorisation aux ressources selon les rôles
        malo_api_users:
            pattern: ^/users|profiles/*
            stateless: true
            provider: app_user_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            lazy: true
            #provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/users/full,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/users/short,       roles: ROLE_USER }
        -  { path: ^/profiles,       roles: ROLE_USER }
        -  { path: ^/users/new,        roles: ROLE_ADMIN }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
